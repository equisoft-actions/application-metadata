name: Resolve common application metadata
description: |
  Resolve common application metadata like the application version or whether it is publishable (by our standards).

  Git "history" must be available for this action to perform well. A typical usage will look like so:

  ```yaml
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Find application metadata
      id: metadata
      uses: .github/actions/application-metadata
  ```

inputs:
  release-branch:
    description: |
      Branch allowed for release. Default to the repository default branch.

      Make sure the branch is available with git fetch (if fetch-depth is unset or > 0)

      ```yaml
      - name : Fetch origin/stable/main (for action-metadata commit check)
        run : |
          git fetch --no-tags --prune --depth=1000 origin +refs/heads/stable/main:refs/remotes/origin/stable/main
      ```

    required: false

  hotfix-branch-prefix:
    description: |
      Branch prefix allowed for hotfix. Tags on this branch will set is_hotfix to true.

      Make sure the branch is available with git fetch (if fetch-depth is unset or > 0)

      ```yaml
      - name: Fetch hotfix branch (for action-metadata commit check)
        run: |
        git fetch --no-tags --prune --depth=1000 origin '+refs/heads/stable/*:refs/remotes/origin/stable/*'
      ```
    required: false

outputs:
  publishable:
    description: |
      'true' if this build can publish artifacts. Only builds from the default branch can be published.
      'false' if this build should not publish its artifacts.
    value: ${{ steps.metadata.outputs.publishable }}
  is-hotfix:
    description: |
      'true' if this build is a hotfix
    value: ${{ steps.metadata.outputs.is-hotfix }}
  is-release:
    description: |
      'true' if this build should create a full release. Only 'publishable' builds can be released. A release is
        typically triggered from a tag matching the 'v1.2.3', semver format.
      'false' if this build should not create a full release.
    value: ${{ steps.metadata.outputs.is-release }}
  version:
    description: |
      The resolved version that the current build can use.
      The version will usually be semver compliant only for releases.
    value: ${{ steps.metadata.outputs.version }}

runs:
  using: composite
  steps:
    - name: Find latest released version
      id: latest
      uses: oprypin/find-latest-tag@v1.1.1
      continue-on-error: true
      with:
        repository: ${{ github.repository }}
        releases-only: false
        prefix: v
        regex: '^v\d+\.\d+\.\d+$'
        sort-tags: true

    - name: Find application metadata
      id: metadata
      shell: bash
      run: |
        PUBLISHABLE="false"
        IS_RELEASE="false"
        IS_HOTFIX="false"
        VERSION="0.0.0-SNAPSHOT"
        EVENT="${{ github.event_name }}"
        DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
        RELEASE_BRANCH="${{ inputs.release-branch }}"
        HOTFIX_BRANCH_PREFIX="${{ inputs.hotfix-branch-prefix }}"

        if [[ "$EVENT" == "workflow_run" ]]; then
          SOURCE_EVENT="${{ github.event.workflow_run.event }}"
          REF="${{ github.event.workflow_run.head_branch }}"
          SHA="${{ github.event.workflow_run.head_sha}}"
        else
          SOURCE_EVENT="$EVENT"
          REF="${{ github.ref }}"
          REF="${REF#refs/tags/}"
          REF="${REF#refs/heads/}"
          SHA="${{ github.sha }}"
        fi

        LATEST_VERSION="${{ steps.latest.outputs.tag }}"
        LATEST_VERSION="${LATEST_VERSION#v}"
        LATEST_VERSION="${LATEST_VERSION:-0.0.0}"

        if [[ "$DEFAULT_BRANCH" == "" ]]; then
          # Schedule triggers have no `github.event` contexts
          DEFAULT_BRANCH="$REF"
        fi

        if [[ "$RELEASE_BRANCH" == "" ]]; then
          RELEASE_BRANCH="$DEFAULT_BRANCH"
        fi

        # Note: Sometimes we use 14-character date as a revision number
        if [[ $REF =~ v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,14}$ ]]; then
          VERSION="${REF#v}"
          PUBLISHABLE="$(git merge-base --is-ancestor "$SHA" "origin/$RELEASE_BRANCH" && echo "true" || echo "false")"

          if [[ "$PUBLISHABLE" == "false" && ! -z "$HOTFIX_BRANCH_PREFIX" ]]; then
            # Maybe we have an hotfix. Must be ancestor to the corresponding stable hotfix branch
            HOTFIX_BRANCH="${HOTFIX_BRANCH_PREFIX%/}/v${VERSION%.*}.x"
            if [[ ! -z "$(git ls-remote --heads origin ${HOTFIX_BRANCH})" ]]; then
              PUBLISHABLE="$(git merge-base --is-ancestor "$SHA" "origin/$HOTFIX_BRANCH" && echo "true" || echo "false")"
              if [[ "$PUBLISHABLE" == "true" ]]; then
                IS_HOTFIX="true"
              fi
            else
              echo "Hotfix branch '${HOTFIX_BRANCH}' does not exists. Could not publish tag '${VERSION}'"
            fi
          fi

          IS_RELEASE="$PUBLISHABLE"
        elif [[ $SOURCE_EVENT == "pull_request" ]]; then
          if [[ $EVENT == "workflow_run" ]]; then
            VERSION="pr-${{ github.event.workflow_run.pull_requests[0].number }}"
          else
            VERSION="pr-${{ github.event.number }}"
          fi
        elif [[ $DEFAULT_BRANCH == $REF ]]; then
          VERSION="${LATEST_VERSION%.*}.$((${LATEST_VERSION##*.} + 1))-SNAPSHOT"
          PUBLISHABLE="true"
        else
          VERSION="ref-$REF"
        fi

        echo "is-release=$IS_RELEASE" >> $GITHUB_OUTPUT
        echo "publishable=$PUBLISHABLE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-hotfix=$IS_HOTFIX" >> $GITHUB_OUTPUT

        echo "### Aplication metadata" >> $GITHUB_STEP_SUMMARY
        echo "|Output|Value|" >> $GITHUB_STEP_SUMMARY
        echo "|:---|:---|" >> $GITHUB_STEP_SUMMARY
        echo "|__REF__|$REF|" >> $GITHUB_STEP_SUMMARY
        echo "|__SHA__|$SHA|" >> $GITHUB_STEP_SUMMARY
        echo "|__is-hotfix__|$IS_HOTFIX|" >> $GITHUB_STEP_SUMMARY
        echo "|__is-release__|$IS_RELEASE|" >> $GITHUB_STEP_SUMMARY
        echo "|__publishable__|$PUBLISHABLE|" >> $GITHUB_STEP_SUMMARY
        echo "|__version__|$VERSION|" >> $GITHUB_STEP_SUMMARY
